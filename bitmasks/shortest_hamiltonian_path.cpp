/*My First Template :D*/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> ii;
 
#define MOD (ll)1000000007
#define pb   push_back
#define EPS 1e-9
#define FOR(i,n)  for(int i = 0;i < n; i++)
#define FORE(i,a,b) for(int i = a;i <= b; i++)
#define tr(container, it)   for(typeof(container.begin()) it = container.begin(); it != container.end(); it++)
#define io ios_base::sync_with_stdio(false);cin.tie(NULL);
#define endl '\n'
#define F first
#define S second
#define sp ' '
# define M_PI   3.14159265358979323846

template <typename T> T gcd(T a, T b){return (b==0)?a:gcd(b,a%b);}
template <typename T> T lcm(T a, T b){return a*(b/gcd(a,b));}
template <typename T> T mod_exp(T b, T p, T m){T x = 1;while(p){if(p&1)x=(x*b)%m;b=(b*b)%m;p=p>>1;}return x;}
template <typename T> T invFermat(T a, T p){return mod_exp(a, p-2, p);}
template <typename T> T exp(T b, T p){T x = 1;while(p){if(p&1)x=(x*b);b=(b*b);p=p>>1;}return x;}

const int MAXN = 1e3+5;
int n;
int adj[MAXN][MAXN];


bool bit(int i, int mask){
	// ith bit is present in mask
	return (mask&(1<<i));
}

int countsetbits(int mask){
	return __builtin_popcount(mask);
}

int main(){
    io;
    int m;
    cin >> n >> m;
    FOR(i, m){
    	int a, b, w;
    	cin >> a >> b >> w;
    	adj[a][b] = w;
    	adj[b][a] = w;
    }
    int dp[(1 << n)][n];
    // dp[mask][i] be the length of the shortest Hamiltonian walk in the subgraph generated by vertices in mask, that ends in the vertex i
    for(int mask = 0;mask < (1 << n); mask++){
    	for(int i = 0;i < n; i++)
    		dp[mask][i] = MOD;
    }
    for(int mask = 0;mask < (1 << n); mask++){
    	for(int i = 0;i < n; i++){
    		// if ith bit is present in mask and number of set bits in mask is 1 then dp[mask][i] = 0
    		if(bit(i, mask) && countsetbits(mask) == 1)
    			dp[mask][i] = 0;
    		else if(countsetbits(mask) > 1 && bit(i, mask)){
    			for(int j = 0;j < n; j++){
    				if(adj[j][i])
    					dp[mask][i] = min(dp[mask][i], dp[mask^(1<<i)][j] + adj[j][i]);
    			}
    		}
    	}
    }
    int ans = INT_MAX;
    FOR(i, n){
    	ans = min(ans, dp[(1<<n)-1][i]);
    }
    cout << ans << endl;
    return 0;
}
